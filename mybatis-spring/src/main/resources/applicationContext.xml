<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
						http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

  <context:annotation-config />	 						
  <context:component-scan base-package="com.mybatis3" />
  	<!--  Spring的基于注解的事务处理  begin -->
	<!-- 在 Spring service bean(@Service) 上使用@Transactional 注解 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--  Spring的基于注解的事务处理  end -->
  
  <!-- 直接定义数据库连接信息
  <bean id="dataSource" class="org.springframework.jdbc.datasource. DriverManagerDataSource"> 
    <property name="driverClassName" value="com.mysql.jdbc.Driver" /> 
    <property name="url" value="jdbc:mysql://localhost:3306/mybatis3" /> 
    <property name="username" value="root" /> 
    <property name="password" value="00000000" /> 
  </bean> 
  -->  
  
  <!-- 将数据库连接信息定义在外部配置文件中 begin -->
  <context:property-placeholder location="classpath:applicaton.properties"/>
  
   <bean id="dataSource" class="org.springframework.jdbc.datasource. DriverManagerDataSource"> 
    <property name="driverClassName" value="${jdbc.driverClassName}" /> 
    <property name="url" value="${jdbc.url}" /> 
    <property name="username" value="${jdbc.username}" /> 
    <property name="password" value="${jdbc.password} "/> 
  </bean> 
    <!-- 将数据库连接信息定义在外部配置文件中 end -->
   
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
    <property name="dataSource" ref="dataSource" /> 
    <property name="typeAliases" value="com.mybatis3.domain.Student, com.mybatis3.domain.Tutor" /> 
    <!-- typeAliasesPackage指定了一系列包名列表，用逗号隔开，包内含有需要创建别名的 JavaBeans -->
    <property name="typeAliasesPackage" value="com.mybatis3.domain" /> 
    <property name="typeHandlers" value="com.mybatis3.typehandlers.PhoneTypeHandler" /> 
    <!-- typeHandlersPackage指定了一系列包名列表，用逗号隔开，包内含有需要被注册的类型处理器类 -->
    <property name="typeHandlersPackage" value="com.mybatis3.typehandlers" /> 
    <!-- mapperLocations指定了 SQL映射器 Mapper XML 配置文件的位置 -->
    <!-- 注入Mapper方式三（配合@Autowired使用）-->
    <property name="mapperLocations" value="classpath*:com/mybatis3/**/*.xml" /> 
    <!-- <property name="configLocation" value="WEB-INF/mybatisconfig.xml" /> -->
  </bean> 
   
   	<!-- 需要注入SqlSession时用到的bean-->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"> 
	  <constructor-arg index="0" ref="sqlSessionFactory" /> 
	</bean>   
 
 	<!-- 注入Mapper方式一：单个注入Mapper时，定义每一个Mapper bean -->
	<bean id="studentMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
	  <property name="mapperInterface" value="com.mybatis3.mappers.StudentMapper" /> 
	  <property name="sqlSessionFactory" ref="sqlSessionFactory" /> 
	</bean> 	
	<!-- 注入Mapper方式二：批量注入Mapper时，使用MapperScannerConfigurer 
 		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> 
		  <property name="basePackage" value="com.mybatis3.mappers" /> 
		</bean> 	
	 -->
 
 	<!-- 注入Service时，定义Service bean-->
	<bean id="studentService" class="com.mybatis3.services.StudentService"> 
	  <property name="studentMapper" ref="studentMapper" /> 
	</bean> 	
</beans> 